AOC2401 ; 2024 Day 1

T1  ;;TEST DATA 1;;
    ;3   4
    ;4   3
    ;2   5
    ;1   3
    ;3   9
    ;3   3
    ;;ENDS;;

DOIT(actual,task,debug)
    N data
    I actual D LOAD^AOCBASE(2024,1,.data)
    I 'actual D LOADTD^AOCBASE("T1","AOC2401",.data)
    S debug=+$G(debug),task=$S(task=2:2,1:1) 
    N line,sort
    ;We load in the lines, while sorting lowest to highest in each side.
    F line=1:1:data D EXTRACTVAL(data(line),.sort)
    I task=1 D  Q
    .;In task 1, we order by rows on both sides, then add together the differences
    .;Data is loaded, now we sort into list of values by row
    .N ix F ix="OL","OR" D SORTLIST(ix,.sort)
    .;Data is now staged by sorted row ID, so calculate the distance
    .D CALCDIST(.sort)
    I task=2 D 
    .;In task 2 we multiply the number on a row in the left with the count of occurances on the right.
    .;Luckily, our first step gave us that number of occurances on the right so, should be half there.
    .D SORTLIST("OL",.sort)     ;We need the sorted left list still, just not the sorted right list any more.
    .D CALCSIM(.sort)           ;Goes down sorted left and gets the correlation value from the right.
    Q

EXTRACTVAL(dataline,sort)
    ;This seperates each line into the left and right values, using the $PIECE function.
    N p1,p2
    Q:dataline=""                           ;Don't run on blank line
    S p1=$P(dataline,"   ",1)               ;Get left side of input line
    S p2=$P(dataline,"   ",2)               ;Get right side of input line
    ;
    ;In Mumps, all arrays are in a default collation order, where 1 will come before 2 and so on.
    ; i.e., placing in th array, will automatically handle the low (1 or 3) to high (4 or 9) sorting without us needing to  
    S sort("OL",p1)=$G(sort("OL",p1))+1     ;Increment count of occurances on left
    S sort("OR",p2)=$G(sort("OR",p2))+1     ;Increment count of occurances on right
    Q

SORTLIST(ix,sort)
    ;This reads the count of each number on the left and the right, and recasts as lowest is X and next lowest is Y.
    N num,c,cnt S (num,cnt)=""
    F  S num=$O(sort(ix,num)) Q:num=""  D   ;This is going through the collation order 
    .F c=1:1:sort(ix,num) D                 ;This will ensure that 1 showing 3 times, counts as (1, 1, 1)
    ..N targ S targ=$S(ix="OL":"SL",1:"SR") ;Occurance left should update row left, otherwise it's row right.
    ..S cnt=cnt+1                           ;Increment counter for which line we're on
    ..S sort(targ,cnt)=num                  ;Place value in target list.
    Q

CALCDIST(sort)
    ;Final section goes though each row and calculates an always positive distance over left and right value.
    N distance,line S (distance,line)=""
    F  S line=$O(sort("SL",line)) Q:line=""  D  ;Go through each sorted row
    .N v1,v2,vd                                 
    .S v1=sort("SL",line),v2=sort("SR",line)    ;Get v1=[left side]@row, v2=[right side]@row
    .S vd=v2-v1 I vd<0 S vd=vd/-1               ;Subtract right from left, divide by -1 it negative (to make it positive)
    .S distance=distance+vd                     ;add our positive distance onto the current distance
    .W:debug line,?10,v1,?20,v2,?30,vd,?40,distance,!
    ;Final answer is...
    W "Distance is: "_distance,!
    W:'actual&(distance=11) "Correct",!
    W:actual&(distance=2378066) "Correct",!
    Q

CALCSIM(sort)
    ;Task 2 calculating the similarity index
    N similarity S similarity=0
    ;We still need the sorted left from task 1.
    S line="" F  S line=$O(sort("SL",line)) Q:line=""  D 
    .N v1 S v1=sort("SL",line)      ;Get the value to look up from left
    .N v2 S v2=$G(sort("OR",v1))    ;Get the number of occurances from the right for that left val
    .N vs S vs=v1*v2                ;Multiply left and count of entries in right
    .S similarity=similarity+vs     ;Add previous onto sum of similarity
    .W:debug line,?10,v1,?20,v2,?30,vs,?40,similarity,!
    ;Final answer is...
    W "Similarity index is: "_similarity,!
    W:'actual&(similarity=31) "Correct",!
    W:actual&(similarity=18934359) "Correct",!
    Q